<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">


    <!-- 激活组件扫描功能,扫描aop的相关组件组件 -->
    <context:component-scan base-package="com.eazy.*.controller"/>
    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--简化配置:
    	1、自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter
    	2、提供一系列:数据绑定,数字和日期的format,@NumberFormat,@DataTimeFormat,xml,json默认读写支持
    -->
    <mvc:annotation-driven/>

    <!--静态资源默认servlet配置
    	1、加入对静态资源的处理:js,css,gif,png
    	2、允许使用"/"做整体映射
    -->
    <mvc:default-servlet-handler/>

    <mvc:interceptors>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
        <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
        <bean class="com.eazy.commons.auth.AuthInterceptor"></bean>
    </mvc:interceptors>

    <!--扫描web相关的controller-->
    <context:component-scan base-package="com.eazy.*.controller"/>

    <!--全局异常捕捉 -->
    <bean class="com.eazy.commons.exception.GlobalExceptionResolver"/>

    <!-- 上传拦截,如最大上传值及最小上传值 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 100M -->
        <property name="maxUploadSize" value="104857600"></property>
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="maxInMemorySize" value="2048"/> <!-- 解决上传图片小于10kb时不生成临时文件 -->
    </bean>

    <bean id="springContextUtil" class="com.eazy.commons.SpringContextUtil"></bean>

    <!--配置JSP　显示ViewResolver-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".html"/>
    </bean>-->

    <bean id="viewResolver" class="com.jfinal.template.ext.spring.JFinalViewResolver">
        <!-- 是否热加载模板文件-->
        <property name="devMode" value="true"/>
        <!-- 配置shared function, 多文件用逗号分隔 -->
        <property name="sharedFunction" value="/commons/header.html,/commons/footer.html,/commons/tab.html"/>
        <!-- 是否支持以 #(session,value) 的方式访问session -->
        <property name="sessionInView" value="true"/>
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".html"/>
        <property name="order" value="1"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
    </bean>

    <context:property-placeholder location="classpath:mail.properties" ignore-unresolvable="true"/>

    <bean id="mailMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value ="${mail.from}"></property>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="host" value="${mail.host}" />
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.password}" />
        <property name="javaMailProperties">
            <props>
                <!-- 设置认证开关 -->
                <prop key="mail.smtp.auth">true</prop>
                <!-- 启动调试开关 -->
                <prop key="mail.debug">true</prop>
                <!-- 设置发送延时 -->
                <prop key="mail.smtp.timeout">0</prop>
                <prop key="mail.smtp.socketFactory.class">${mail.smtp.socketFactory.class}</prop>
                <prop key="mail.smtp.port">${mail.smtp.port}</prop>
                <prop key="mail.smtp.socketFactory.port">${mail.smtp.socketFactory.port}</prop>
            </props>
        </property>
    </bean>

    <!-- 缓存配置 -->
    <!-- 启用缓存注解功能  -->
    <cache:annotation-driven cache-manager="cacheManager" />
    <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
    <!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches"> <set> <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
        </set> </property> </bean> -->
    <!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->

    <bean id="cacheManagerFactory"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml" />
    </bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory" />
    </bean>

    <!--重要！将你的SwaggerConfig配置类注入-->
    <bean class="com.eazy.config.SwaggerConfig"/>
    <!--重要！配置swagger资源不被拦截-->
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />
</beans>